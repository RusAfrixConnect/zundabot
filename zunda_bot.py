from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "7250640210:AAEWw1Zmi_jJv6KvTLBM4E3A_74L3WpwuQ0"

# Devises avec drapeaux
DEVIS = {
    "RUB": "üá∑üá∫",
    "EUR": "üá™üá∫",
    "USD": "üá∫üá∏",
    "CFA": "üá®üáÆ",
    "THB": "üáπüá≠",
    "KRW": "üá∞üá∑",
    "ZND": "üí† Zunda",
}

# Wallet: {user_id: {devise: solde, ...}, ...}
wallets = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö–æ—à–µ–ª—ë–∫", callback_data="wallet")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="buy")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZundaBot! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if user_id not in wallets:
        wallets[user_id] = {devise: 0 for devise in DEVIS}

    if data == "wallet":
        # Afficher solde
        text = "üëú –¢–≤–æ–π –∫–æ—à–µ–ª—ë–∫:\n"
        for devise, flag in DEVIS.items():
            text += f"{flag} {devise}: {wallets[user_id][devise]}\n"
        await query.edit_message_text(text=text)
    
    elif data == "buy":
        keyboard = [[InlineKeyboardButton(f"{flag} {devise}", callback_data=f"buy_{devise}")] for devise, flag in DEVIS.items()]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=reply_markup)

    elif data == "sell":
        keyboard = [[InlineKeyboardButton(f"{flag} {devise}", callback_data=f"sell_{devise}")] for devise, flag in DEVIS.items()]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=reply_markup)

    elif data == "start":
        await start(update, context)

    elif data.startswith("buy_"):
        devise = data.split("_")[1]
        wallets[user_id][devise] += 10  # Par exemple, on ajoute 10 unit√©s pour simuler l'achat
        await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ 10 {devise} {DEVIS[devise]}!")

    elif data.startswith("sell_"):
        devise = data.split("_")[1]
        if wallets[user_id][devise] >= 10:
            wallets[user_id][devise] -= 10  # On enl√®ve 10 unit√©s pour simuler la vente
            await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ 10 {devise} {DEVIS[devise]}!")
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {devise} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {wallets[user_id][devise]}")

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

